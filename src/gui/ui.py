from gui.gen import Ui_designer_window

from os.path import exists, basename, abspath
from FileComparator import FileComparator
from report_generators.PDFReport import PDFReport


from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSlot

__author__ = 'saflores'

import platform

__version__ = '0.0.1'


class UI (Ui_designer_window):
    """
    This Class extends the Ui_main_window generated by QT designer so that we can
    add or modify it's behaviour without editing the generated code.
    """
    def __init__(self, main_window_p):
        super().__init__()
        self.setupUi(main_window_p)
        self.main_window = main_window_p

        ###########################################################
        # connections follow
        self.btn_compare.clicked.connect(lambda: self.do_something("lambda makes the function " +
                                                                  "annonymous so that we can pass " +
                                                                  "parameters", "blah"))

        self.action_about.triggered.connect(self.about)

    @pyqtSlot()
    def do_something(self, p, q):
        self.statusbar.clearMessage()

        t = self.line_test.text()
        r = self.line_ref.text()

        if not exists(t):
            self.statusbar.showMessage('Test file does not exist')
            return

        if not exists(r):
            self.statusbar.showMessage('Reference file does not exist')
            return

        fc = FileComparator(t, r)
        res = fc.compare()

        if res.is_acceptable:
            self.statusbar.showMessage('Files do not have significant differences :)')
        else:
            self.statusbar.showMessage('Files have significant differences :(')

        out_f = str(basename(t))[:-4] + '.pdf'

        pdf_report = PDFReport(res)
        pdf_report.summary()

        self.statusbar.showMessage('generating pdf report, please wait...')
        pdf_report.plot_results()
        pdf_report.output(out_f, 'F')

        if exists(out_f):
            self.statusbar.showMessage('Done. Output file is: ' + abspath(out_f))
            self.line_test.clear()
            self.line_ref.clear()
        else:
            self.statusbar.showMessage('Oops! something went wrong. Cannot continue"')

    def about(self):
        """Popup a box with about message."""
        about_str = "<center><b>Validate v{0} </b></center>           " + \
                    "<p>Copyright Â© 2014 Samuel FLORES.               " + \
                    "All rights reserved in accordance with GPL v3</p>" + \
                    "<p>Python {1} - on {2}</p>"

        QMessageBox.about(self.main_window, "Validate",
                          about_str.format(__version__, platform.python_version(), platform.system()))

