import os
import platform
from os.path import exists, abspath, dirname, basename, join

from PyQt5 import QtSvg
from PyQt5.QtCore import QCoreApplication, QRect, Qt, QSettings
from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSlot, QThread, QModelIndex

from Results import FileCmpResult
from gui.PreferencesDialog import PreferencesDialog
from gui.FileComparatorAsyncWrapper import FileComparatorAsyncWrapper
from gui.PDFReportAsyncWrapper import PDFReportAsyncWrapper
from gui.ResultTableMdl import ResultTableMdl, StatusSortingProxyModel
from gui.SVGAsyncGenerator import SVGAsyncGenerator
from gui.gen.main_window import Ui_designer_window
from report_generators.PDFReport import PDFReport

__author__ = 'saflores'
__version__ = '0.0.1'


class UI (Ui_designer_window):
    """
    This Class extends the Ui_main_window generated by QT designer so that we can
    add or modify it's behaviour without editing the generated code.
    """
    ####################################################################################################################
    def __init__(self, main_window_p):
        super().__init__()
        self.setupUi(main_window_p)
        self.main_window = main_window_p

        # add an empty expanding widget (a separator) before action quit to the toolbar.
        self.toolbar_sep = QWidget()
        self.toolbar_sep.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.toolBar.insertWidget(self.action_quit, self.toolbar_sep)
        self.toolBar.orientationChanged.connect(self.handle_toolbar)

        self.p_src_mdl = None
        self.comparision_result = None
        self.cmp_thread = None
        self.pdf_thread = None
        self.svg_thread = None

        self.fc_wrapper = FileComparatorAsyncWrapper()
        self.pdf_report_wrapper = PDFReportAsyncWrapper()
        self.table_view_results.hide()
        self.lbl_result_is.hide()
        self.lbl_result.setText('')

        # Prepare a temporary directory for files:
        self.tmp_dir = self.prepare_tmp_dir()

        ###########################################################
        # connections follow reminder: signal.connect(slot)
        # buttons
        self.btn_compare.clicked.connect(self.start_comparision)
        self.btn_browse_test.clicked.connect(self.open_test_file)
        self.btn_browse_ref.clicked.connect(self.open_ref_file)

        # do something upon arrival of results
        self.fc_wrapper.result_ready.connect(self.handle_result)
        self.pdf_report_wrapper.pdf_ready.connect(self.handle_pdf)

        # do something on extra thread errors:
        self.fc_wrapper.sig_error_ocurred.connect(self.handle_input_error)

        # actions in our menu
        self.action_about.triggered.connect(self.about)
        self.action_to_pdf.triggered.connect(self.start_pdf_generation)
        self.action_clear_all.triggered.connect(self.clear_all)
        self.action_quit.triggered.connect(self.exit)
        self.action_preferences.triggered.connect(self.show_preferences)

        # what to do on result selection
        self.table_view_results.doubleClicked.connect(self.start_graph)

    ####################################################################################################################
    @pyqtSlot(object)
    def handle_toolbar(self, orientation):
        if Qt.Horizontal == orientation:
            self.toolBar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        if Qt.Vertical == orientation:
            self.toolBar.setToolButtonStyle(Qt.ToolButtonIconOnly)

    ####################################################################################################################
    def prepare_tmp_dir(self):
        my_dir = join(os.curdir, '.validate')
        try:
            os.makedirs(my_dir, exist_ok=True)
        except OSError:
            self.statusbar.showMessage('Can not create temporary directory' + my_dir)
            self.main_window.setEnabled(False)
        return my_dir

    def clean_tmp_dir(self):
        # TODO: put this in another thread?
        for f in os.listdir(self.tmp_dir):
            try:
                print('removing', join(self.tmp_dir,f))
                os.remove(join(self.tmp_dir,f))
            except OSError as e:
                print(e)

    ####################################################################################################################
    @pyqtSlot(object)
    def start_graph(self, selected: QModelIndex):
        # the selected element is from the proxy model (used for sorting)
        # map back to the source model
        original_model_index = self.p_src_mdl.mapToSource(selected)

        result_couple = self.comparision_result.result_l[original_model_index.row()]

        self.svg_thread = SVGAsyncGenerator(result_couple.test_var, result_couple.ref_var, self.tmp_dir)

        self.svg_thread.svg_ready.connect(self.handle_graph)
        self.svg_thread.finished.connect(self.svg_thread.quit)

        self.svg_thread.start()

    ####################################################################################################################
    @pyqtSlot(object)
    def handle_graph(self, f):
        print(f)
        self.w = QtSvg.QSvgWidget()
        self.w.load(f)
        self.w.setGeometry(QRect(100, 100, 800, 600))
        self.w.show()

    ####################################################################################################################
    @pyqtSlot()
    def start_comparision(self):
        # disable the use of the button while comparing
        self.btn_compare.setEnabled(False)
        self.clear_results()

        t = self.line_test.text()
        r = self.line_ref.text()

        ########## Some Error Handling:
        if not exists(t):
            self.handle_input_error('Test file does not exist')
            return

        if not exists(r):
            self.handle_input_error('Reference file does not exist')
            return

        self.fc_wrapper.set_files_to_compare(t, r)

        # we can now put the wrapper in a separate thread
        self.cmp_thread = QThread()
        self.fc_wrapper.moveToThread(self.cmp_thread)
        # the code above will fail the second time because the fc_wrapper will live in the cmp_thread.
        # we can only "push" objects from the current thread.
        # the solution is to move it back at the end of the cmp_thread

        # tell the thread what to do when started and when finished; then go!
        self.cmp_thread.started.connect(self.fc_wrapper.synchronous_compare)
        self.cmp_thread.finished.connect(self.cmp_thread.deleteLater)
        self.fc_wrapper.result_ready.connect(self.cmp_thread.quit)

        self.cmp_thread.start()

        self.statusbar.showMessage('Comparing...')
        # nothing else to do here, handle result will be called when our thread emits a signal

    ####################################################################################################################
    @pyqtSlot()
    def start_pdf_generation(self):

        default_d = dirname(self.comparision_result.file_test)
        default_f = basename(self.comparision_result.file_test)[:-4] + '.pdf'

        tr = QCoreApplication.translate
        out_f, crap = QFileDialog.getSaveFileName(None,
                                                  tr("designer_window", "Save report file"),
                                                  join(default_d, default_f),
                                                  tr("designer_window", "PDF documents (*.pdf)"))

        if '' == out_f:
            # user cancelled the operation
            return

        ####################
        # opening a tmp file to be sure that we can write on windows
        try:
            test_f = open(out_f, 'w')
            test_f.write('test')
            test_f.close()
        except PermissionError:
            # file can not be written because it is open?
            self.statusbar.showMessage('Error writing to ' + out_f + '. Make Sure file is not open.')
            return
        ####################

        self.statusbar.showMessage('generating pdf report, please wait...')
        # disable further stuff until the export finishes
        self.main_window.setEnabled(False)

        pdf_report = PDFReport(self.comparision_result, self.tmp_dir)

        # set the output file
        self.pdf_report_wrapper.set_output_f(out_f)
        # put the PDFReport in an async wrapper
        self.pdf_report_wrapper.set_pdf_report(pdf_report)

        self.pdf_thread = QThread()
        self.pdf_report_wrapper.moveToThread(self.pdf_thread)

        self.pdf_thread.started.connect(self.pdf_report_wrapper.synchronous_pdf_generation)
        self.pdf_thread.finished.connect(self.pdf_thread.deleteLater)
        self.pdf_report_wrapper.pdf_ready.connect(self.pdf_thread.quit)

        self.pdf_thread.start()

    ####################################################################################################################
    @pyqtSlot(object)
    def handle_result(self, res: FileCmpResult):
        self.statusbar.showMessage('Done')
        self.comparision_result = res

        ########## set the result label with a message and show it:
        if self.comparision_result.is_acceptable:
            self.lbl_result.setText('<div style="color:green;font-weight:bold;">Passed</div>')
            self.statusbar.showMessage('Files do not have significant differences :)', 5000)
        else:
            self.lbl_result.setText('<div style="color:red;font-weight:bold;">Not Passed</div>')
            self.statusbar.showMessage('Files have significant differences :(', 5000)

        self.lbl_result_is.show()

        ########## create a Result_table_model with the results and associate it with the view through a proxy
        src_mdl = ResultTableMdl(self.comparision_result)
        # use a proxy so that we can sort by column
        self.p_src_mdl = StatusSortingProxyModel()
        self.p_src_mdl.setSourceModel(src_mdl)

        self.table_view_results.setModel(self.p_src_mdl)
        self.table_view_results.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)

        self.table_view_results.show()
        # sort by Status by default, greater errors first
        self.table_view_results.sortByColumn(ResultTableMdl.STATUS_COLUMN, Qt.AscendingOrder)
        ########## resize the window to accomodate the result table view
        self.main_window.adjustSize()

        ########## enable pdf export:
        self.action_to_pdf.setEnabled(True)
        self.action_to_pdf.setEnabled(True)
        ########## re-enable cmp button:
        self.btn_compare.setEnabled(True)

    ####################################################################################################################
    @pyqtSlot(object)
    def handle_pdf(self, out_f):
        self.main_window.setEnabled(True)
        if exists(out_f):
            self.statusbar.showMessage('Done. Output file is: ' + abspath(out_f))
            self.clear_all()
        else:
            self.statusbar.showMessage('Oops! something went wrong. Report file could not be generated :(')

    ####################################################################################################################
    @pyqtSlot(object)
    def handle_input_error(self, message):
        self.clear_results()
        self.statusbar.showMessage(message)
        self.btn_compare.setEnabled(True)

    ####################################################################################################################
    def clear_results(self):
        self.lbl_result.clear()
        self.lbl_result_is.hide()
        self.action_to_pdf.setEnabled(False)
        self.action_to_pdf.setEnabled(False)
        self.comparision_result = None
        self.table_view_results.setModel(None)
        self.table_view_results.hide()

    ####################################################################################################################
    @pyqtSlot()
    def clear_all(self):
        self.line_test.clear()
        self.line_ref.clear()
        self.clear_results()
        self.clean_tmp_dir()

    ####################################################################################################################
    @pyqtSlot()
    def about(self):
        """Popup a box with about message."""
        about_str = '<center><b>Validate v{0} </b></center>' + \
                    '<p>Copyright © 2014 - samuel.flores@sogeti.com </p>' + \
                    '<p>All rights reserved in accordance with GPL v3</p>' + \
                    '<p>Python {1} - on {2}</p>'

        QMessageBox.about(self.main_window, "Validate",
                          about_str.format(__version__, platform.python_version(), platform.system()))

    ####################################################################################################################
    @pyqtSlot()
    def show_preferences(self):
        """shows the preferences dialog"""

        dialog = QDialog()
        my_preferences_dialog = PreferencesDialog(dialog)

        dialog_accepted = dialog.exec()

        if dialog_accepted:
            print('image quality set to ' + str(my_preferences_dialog.spinBox.value()))
            mySettings = QSettings(QSettings.IniFormat, QSettings.UserScope, 'Sogeti', 'validate')
            mySettings.setValue('report/imageQuality', my_preferences_dialog.spinBox.value())
            mySettings.sync()

    ####################################################################################################################
    @pyqtSlot()
    def open_test_file(self):
        tr = QCoreApplication.translate
        f, ext = QFileDialog.getOpenFileName(None,
                                             tr("designer_window", "Choose test file"),
                                             os.getcwd(),
                                             tr("designer_window", "CSV files (*.csv)"))

        self.line_test.setText(f)

    ####################################################################################################################
    @pyqtSlot()
    def open_ref_file(self):
        tr = QCoreApplication.translate
        f, filter = QFileDialog.getOpenFileName(None,
                                                tr("designer_window", "Choose reference file"),
                                                os.getcwd(),
                                                tr("designer_window", "CSV files (*.csv)"))

        self.line_ref.setText(f)

    ####################################################################################################################
    @pyqtSlot()
    def exit(self):
        self.clear_all
        QCoreApplication.quit()